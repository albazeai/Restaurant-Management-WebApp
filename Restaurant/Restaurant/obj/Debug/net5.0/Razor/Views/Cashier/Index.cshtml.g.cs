#pragma checksum "C:\Users\Malba\OneDrive\Documents\RestaurantCapstone\Restaurant\Restaurant\Views\Cashier\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ca5a2bc3b264f36efeeb9defb4307baf2a8fd515"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Cashier_Index), @"mvc.1.0.view", @"/Views/Cashier/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Malba\OneDrive\Documents\RestaurantCapstone\Restaurant\Restaurant\Views\_ViewImports.cshtml"
using Restaurant;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Malba\OneDrive\Documents\RestaurantCapstone\Restaurant\Restaurant\Views\_ViewImports.cshtml"
using Restaurant.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ca5a2bc3b264f36efeeb9defb4307baf2a8fd515", @"/Views/Cashier/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9a59b7783d8b0512a9ae3ec4003f04bd353cebbb", @"/Views/_ViewImports.cshtml")]
    public class Views_Cashier_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("action", new global::Microsoft.AspNetCore.Html.HtmlString("/Cashier/SeparatePays"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("sep_form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n\r\n");
#nullable restore
#line 5 "C:\Users\Malba\OneDrive\Documents\RestaurantCapstone\Restaurant\Restaurant\Views\Cashier\Index.cshtml"
  
    ViewData["Title"] = "Index";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            WriteLiteral("\r\n\r\n<h1>Cashier Home</h1>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"container\">\r\n    <h2 class=\"text-danger\">");
#nullable restore
#line 21 "C:\Users\Malba\OneDrive\Documents\RestaurantCapstone\Restaurant\Restaurant\Views\Cashier\Index.cshtml"
                       Write(ViewBag.ErrorMessage);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h2>\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-5 col-md-5\">\r\n            <div class=\"border border-success\">\r\n                <div");
            BeginWriteAttribute("class", " class=\"", 438, "\"", 446, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""table-info""></div>
                <div id=""table_action_container"" >
                    <div class=""alert alert-success"">
                        <hr />
                        <h2> SebTotal: $ <span id=""table_sebtotal""></span></h2>
                        <h2> HST(13%): $ <span id=""table_hst""></span></h2>
                        <hr />
                        <h2> Total: $ <span id=""table_total""></span></h2>
                        <hr />
                    </div>
                    <div");
            BeginWriteAttribute("class", " class=\"", 959, "\"", 967, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                        <button class= ""btn btn-primary m-2"" id=""sep_btn"">Pay Individually</button> <br /><hr />
                        <button class= ""btn btn-danger m-2"" id=""clear_btn"">Clear Table</button>
                    </div>
                </div>
                
            </div>
        </div>
        <div class=""col-sm-2 col-md-2"">
        </div>
        <div class=""col-sm-5 col-md-5"">
            <div class=""border border-success"" id=""sep_pay_container"">
                <input type=""hidden"" value=""0"" id=""flagBtn"" />
                <div");
            BeginWriteAttribute("class", " class=\"", 1542, "\"", 1550, 0);
            EndWriteAttribute();
            WriteLiteral(" id=\"sep_content\"></div>\r\n                <h2 class=\"bg-success text-center text-light p-2\">TOTAL</h2>\r\n                <div class=\"alert alert-success\">\r\n                    <h3");
            BeginWriteAttribute("class", " class=\"", 1729, "\"", 1737, 0);
            EndWriteAttribute();
            BeginWriteAttribute("id", " id=\"", 1738, "\"", 1743, 0);
            EndWriteAttribute();
            WriteLiteral(">Subtotal: $ <span id=\"sep_total_seb\">0.00</span></h3>\r\n                    <h3");
            BeginWriteAttribute("class", " class=\"", 1823, "\"", 1831, 0);
            EndWriteAttribute();
            BeginWriteAttribute("id", " id=\"", 1832, "\"", 1837, 0);
            EndWriteAttribute();
            WriteLiteral(">HST(13%): $ <span id=\"sep_hst\">0.00</span></h3>\r\n                    <hr />\r\n                    <h2");
            BeginWriteAttribute("class", " class=\"", 1939, "\"", 1947, 0);
            EndWriteAttribute();
            BeginWriteAttribute("id", " id=\"", 1948, "\"", 1953, 0);
            EndWriteAttribute();
            WriteLiteral(">Total: $ <span id=\"sep_total\">0.00</span></h2>\r\n                </div>\r\n                <div>\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ca5a2bc3b264f36efeeb9defb4307baf2a8fd5157903", async() => {
                WriteLiteral("\r\n                        <input type=\"hidden\" name=\"id\"");
                BeginWriteAttribute("value", " value=\"", 2191, "\"", 2199, 0);
                EndWriteAttribute();
                WriteLiteral(" id=\"tableId\" />\r\n                        <input type=\"hidden\" name=\"total\"");
                BeginWriteAttribute("value", " value=\"", 2275, "\"", 2283, 0);
                EndWriteAttribute();
                WriteLiteral(" id=\"finalSepTotal\" />\r\n                        <input type=\"hidden\" name=\"paidItems\"");
                BeginWriteAttribute("value", " value=\"", 2369, "\"", 2377, 0);
                EndWriteAttribute();
                WriteLiteral(" id=\"paidItemsInput\" />\r\n                        <hr />\r\n                        <input type=\"submit\" value=\"Process\" class=\"btn btn-success m-2\" />\r\n                    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    <hr />\r\n                    <a href=\"/Cashier\" class=\"btn btn-danger m-2\">Cancel</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n");
            WriteLiteral("\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n");
#nullable restore
#line 74 "C:\Users\Malba\OneDrive\Documents\RestaurantCapstone\Restaurant\Restaurant\Views\Cashier\Index.cshtml"
      await Html.RenderPartialAsync("_ValidationScriptsPartial");

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
<script>
    $(document).ready(function () {
        $(""#table_action_container"").hide();
        $(""#sep_pay_container"").hide();

        let table_id = 0;
        let main_dict = {};

        $(""#tableSelecterIndex"").change(function () {
            $(""#table_action_container"").hide();
            addedItems = []; // clear seprate pay items if there is any left.
            let tableId = isInteger($(""#tableSelecterIndex"").val());
            if (tableId) {
                let id = $(""#tableSelecterIndex"").val();
                $.ajax({
                    type: ""Post"",
                    url: ""/Cashier/TableDetails"",
                    data: { id: id },
                    success: function (data) {
                        table_id = data.tableId  // getting a copy of the table id
                        loadItems(data);
                    },
                    error: function (req, status, error) {
                    }
                });
            } else {
             ");
                WriteLiteral(@"   $(""#sep_pay_container"").hide();
                $(""#sep_content"").html("""");
                $(""#table-info"").html("""");
                //setTotal(2, 0.00);
            }

        });


        // load items on table selected
        function loadItems(data) {
            if (data !== null) {
                // reset separate pay containers
                sep_items = []
                $(""#sep_pay_container"").hide();
                $(""#sep_content"").html('');
                $(""#sep_total_seb"").text(""0.00"")
                $(""#sep_hst"").text(""0.00"")
                $(""#sep_total"").text(""0.00"")
                $("".table_items"").prop('disabled', true);

                // display the current table data
                let items = data.tableItems.split(',');
                main_dict = dict_store(items);     // store items in dictionary 
                displayTableItems(main_dict)     // disply items
            }
        }

        function dict_store(items) {
            let u");
                WriteLiteral(@"nique_items = new Set(items)
            let dict = {}
            // initalize quntity set to 0
            unique_items.forEach(function (value) {
                if (value.trim() !== """") {
                    dict[value] = 0;
                }
            })
            // set the actual quantity of each item
            unique_items.forEach(function (value) {
                for (val of items) {
                    if (value.trim() !== """") {
                        if (val === value) {
                            dict[value] += 1;
                        }
                    }

                }
            })

            return dict;
        }
        // display items on screen
        function displayTableItems(dict) {
            // clear pay container and hide it
           
            // display items 
            $(""#table-info"").html('');
            $(""#table-info"").append('<h2 class=""bg-info text-center text-light p-2"">Table - ' + table_id + '</h2>');
            l");
                WriteLiteral(@"et total = 0;
            for (let key in dict) {
                if (dict[key] !== 0) {
                    let price = item_price(key);
                    total += price * dict[key];
                    $(""#table-info"").append('<button class=""btn btn-success m-2 table_items"" value = ""' + key + '"">' + key + '<span class= ""badge badge-dark m-1 p-2"" > ' + dict[key] + '</span ></button><br>');
                }
            }
            // load the total amount
            let hst = (total * 0.13).toFixed(2)
            let table_total = (total + Number(hst)).toFixed(2)
            $(""#table_sebtotal"").text(total)
            $(""#table_hst"").text(hst)
            $(""#table_total"").text(table_total)

            $(""#table_action_container"").show();
        }

        // enable buttons when separat pay invoked
        $(""#sep_btn"").click(function () {
            $(""#sep_content"").html('');
            $(""#sep_pay_container"").show();
            // reset the buttons properties
            ");
                WriteLiteral(@"$("".table_items"").prop('disabled', false);
  
        });
            /* Adding items to separat pay container */
        $(""#table-info"").on(""click"", "".table_items"", function () {
            separate_pay_add_content($(this).val())
        });
        /* Removing items from separat pay container */
        $(""#sep_content"").on(""click"", "".sep_items"", function () {
            separate_pay_remove_content($(this).val())
        });

        // Adding items to the separate pay container
        let sep_items = []
        function separate_pay_add_content(item) {

            // loop through the main data and remove item
            for (let key in main_dict) {
                if (key === item) {
                    if (main_dict[key] > 0) {
                        main_dict[key] -= 1;
                    }

                }
            }
            displayTableItems(main_dict) // update the main table data 


            // now deal with the separate pay content
            sep_ite");
                WriteLiteral(@"ms.push(item);
            let dict = dict_store(sep_items);
            $(""#sep_content"").html('');
            $(""#sep_content"").append('<h2 class=""bg-info text-center text-light p-2"">Table - ' + table_id + '</h2>');
            let total = 0;
            for (let key in dict) {
                let price = item_price(key);
                total += price * dict[key];
                $(""#sep_content"").append('<button class=""btn btn-success m-2 sep_items"" value = ""' + key + '"">' + key + '<span class= ""badge badge-dark m-1 p-2"" > ' + dict[key] + '</span ></button><br>');
            }

            // load the total amount
            let hst = (total * 0.13).toFixed(2)
            let sep_total = (total + Number(hst)).toFixed(2)
            $(""#sep_total_seb"").text(total.toFixed(2))
            $(""#sep_hst"").text(hst)
            $(""#sep_total"").text(sep_total)

        }

        // Removing items from the separate pay container
        function separate_pay_remove_content(item) {

     ");
                WriteLiteral(@"       // loop through the main data and remove item
            for (let key in main_dict) {
                if (key === item) {
                    main_dict[key] += 1;

                }
            }
            displayTableItems(main_dict) // update the main table data 

            // now deal with the separate pay content
            // find matched item
            const index = sep_items.indexOf(item)
            if (index > -1) { sep_items.splice(index, 1) }
            let dict = dict_store(sep_items);
            $(""#sep_content"").html('');
            $(""#sep_content"").append('<h2 class=""bg-info text-center text-light p-2"">Table - ' + table_id + '</h2>');
            let total = 0;
            for (let key in dict) {
                let price = item_price(key);
                total += price * dict[key];
                $(""#sep_content"").append('<button class=""btn btn-success m-2 sep_items"" value = ""' + key + '"">' + key + '<span class= ""badge badge-dark m-1 p-2"" > ' + dict[key");
                WriteLiteral(@"] + '</span ></button><br>');
            }

            // load the total amount
            let hst = (total * 0.13).toFixed(2)
            let sep_total = (total + Number(hst)).toFixed(2)
            $(""#sep_total_seb"").text(total.toFixed(2))
            $(""#sep_hst"").text(hst)
            $(""#sep_total"").text(sep_total)

        }


        /**
         * calculating the item price and return the value
         *
         * param {any} item
         */
        function item_price(item) {
            let price = 0;
            let amount = """";

            if (item.length !== 0) {
                let i = 0;
                while (i < item.length) {
                    if (item[i] === '$') {
                        amount = """";
                        i++;
                        while (item[i] !== "" "" && item[i] !== '$' && i < item.length) {
                            amount += item[i];
                            i++;
                        }
                        price");
                WriteLiteral(@" = parseFloat(amount);
                    } else {
                        i++;
                    }
                }

                return price; // return total
            }
            return price;

        }
        //sep form submition
        $(""#sep_form"").submit(function () {
            let items = sep_items.join(',');
            $(""#tableId"").val(table_id);
            $(""#finalSepTotal"").val($(""#sep_total"").text());
            $(""#paidItemsInput"").val(items.toString());
            return true;
        });

        // clear table button event
        $(""#clear_btn"").click(function () {
            if (confirm(""Ary you sure you want to clear this Table?"")) {
                let tableId = isInteger(table_id);
                if (tableId) {
                    /* sending request to clear the table */
                    $.ajax({
                        type: ""Post"",
                        url: ""/Cashier/ClearTable"",
                        data: { id: table_id },");
                WriteLiteral(@"
                        success: function (data) {
                            window.location.href = ""/Cashier"";
                        },
                        error: function (req, status, error) {
                            //console.log(msg);
                        }
                    });
                }
            } else {

            }
        });
        /**
         *
         *  validation method that validate the any integer value. (mostly used for table Id)
         */
        function isInteger(value) {
            return /^\d+$/.test(value);
        }
    });
</script>
<script>


//$(document).ready(function () {

//    let tableNumber = 0;

//    $(""#tableSelecterIndex"").change(function () {
//        let tableId = isInteger($(""#tableSelecterIndex"").val());
//        if (tableId) {
//            let id = $(""#tableSelecterIndex"").val();
//            $.ajax({
//                type: ""Post"",
//                url: ""/Cashier/TableDetails"",
//        ");
                WriteLiteral(@"        data: { id: id },
//                success: function (data) {
//                    loadItems(data);
//                },
//                error: function (req, status, error) {
//                }
//            });
//        } else {
//            $("".payContainer"").hide();
//            $(""#table-info"").html("""");
//            $(""#itemsContainer"").html("""");
//            setTotal(2, 0.00);
//        }

//    });

    ///**
    // *
    // *  validation method that validate the any integer value. (mostly used for table Id)
    // */
    //function isInteger(value) {
    //    return /^\d+$/.test(value);
    //}

//    /**
//     * loading the table items.
//     * param {any} data1
//     */
//    function loadItems(data1) {
//        if (data1 !== null) {
//            tableNumber = data1.tableId;
//            $(""#table-info"").html("""");
//            $(""#itemsContainer"").html("""");
//            setTotal(2, 0.00); // reset total
//            $(""#table-info"").appe");
                WriteLiteral(@"nd('<h2 class=""bg-info text-center text-light p-2"">Table - ' + data1.tableId + '</h2>');
//            $(""#itemsContainer"").append('<h2 class=""bg-info text-center text-light p-2"">Table - ' + data1.tableId + '</h2>');
//            $('#paidItemsInput').val("""");
//            $("".payContainer"").hide();
//            $(""#flagBtn"").val('0');
//            $(""#tableId"").val(data1.tableId);  // setting up the current table id for separate pay form.
//            let item = """";
//            let data = data1.tableItems;
//            if (data !== null) {

//                // Calculating the quantity of each item
//                let item = data.split(',');
//                let modItems = [];
//                let parallelItems = [];
//                for (var j = 0; j < item.length; j++) {
//                    let count = 0;
//                    let g = item[j];
//                    for (var c = 0; c < item.length; c++) {
//                        if (item[c].trim() === g.trim()) {
//       ");
                WriteLiteral(@"                     count++;
//                        }
//                    }
//                    let y = g + '<span class=""badge badge-dark m-1 p-2"">' + count + '</span>';
//                    if (!modItems.includes(y.trim()) && g.trim() !== """") {
//                        modItems.push(y.trim());
//                        parallelItems.push(g + ',');
//                    }

//                }

//                let i = 0;
//                while (i < modItems.length) {
//                    let val = parallelItems[i]; // array declared up ^ to store items with comma and use them as the button values.
//                    $(""#table-info"").append('<div class=""items""> <button class=""btn btn-success m-2 buttons2"" value = ""' + val + '"">' + modItems[i] + '</button></div>');
//                    i++;
//                }

//            }
//            // appending the Total html elements:
//            $(""#table-info"").append('<div class=""alert alert-success"">' +
//                  ");
                WriteLiteral(@"                      '<h3>Total: $ ' + (data1.total.toFixed(2)) + '</h3>' +
//                                        '<h3 class="""">HST(13%): $ ' + (data1.total * 0.13).toFixed(2) + '</h3><hr/>' +
//                                        '<h2 class="""">Subtotal: $ ' + (data1.total + (data1.total * 0.13)).toFixed(2) + '</h2>' +
//                                        '</div>');

//            $(""#table-info"").append('<div>' +
//                '<button class= ""btn btn-danger m-2 removeTable"" value = ""' + data1.tableId + '"" > Clear Table</button > <br><hr /> ' +
//                '<button class=""btn btn-primary m-2 paySeparate"" value=""' + data1.tableId + '"" > Pay Individually</button >' +
//                '</div > ');
//        }
//    }

//    /* Clearing tables on clear button clicks */

//    $(""#table-info"").on(""click"", "".removeTable"", function () {

//        if (confirm(""Confirm Delete?"")) {
//            let tableId = isInteger($(this).val());
//            if (tableId) {
//       ");
                WriteLiteral(@"         let id = $(this).val();
//                /* sending request to clear the table */
//                $.ajax({
//                    type: ""Post"",
//                    url: ""/Cashier/ClearTable"",
//                    data: { id: id },
//                    success: function (data) {
//                        window.location.href = ""/Cashier"";
//                    },
//                    error: function (req, status, error) {
//                        //console.log(msg);
//                    }
//                });
//            }
//        } else {

//        }

//    });

//    /* Pay Separatly button event */
//    $("".payContainer"").hide();
//    $(""#table-info"").on(""click"", "".paySeparate"", function () {
//        $("".payContainer"").show();
//        $(""#flagBtn"").val(1);
//    });


///* Adding items */
//    $(""#table-info"").on(""click"", "".buttons2"", function () {
//        let flag = $(""#flagBtn"").val();
//        if (flag === '1') {
//            orders(""add""");
                WriteLiteral(@", $(this).val());
//            addTotal($(this).val()); // update total paidItemsInput
//            $('#paidItemsInput').val(addedItems.toString());

//        }

//    });


//    /* Removing items on clicking them */
//    $('#itemsContainer').on('click', '.items2', function () {
//        orders(""remove"", $(this).val());
//        subTotal($(this).val()); // update total
//        $('#paidItemsInput').val(addedItems.toString());
//    });

//    /* Adding items */
//    const addedItems = [];

//    /**
//    * function that will deal with the added or removed items
//    *
//    * flag : string 'remove', 'add'
//    * item: string item that need to be added or removed
//    * */
//    function orders(flag, item) {
//        if (flag === ""remove"") {
//            const index = addedItems.indexOf(item);
//            if (index > -1) {
//                addedItems.splice(index, 1);
//            }
//            $(""#itemsContainer"").html("""");
//            $(""#itemsContainer""");
                WriteLiteral(@").append('<h2 class=""bg-info text-center text-light p-2"">Table - ' + tableNumber + '</h2>');
//            let u = new Set(addedItems);
//            for (const value of u.values()) {
//                let val = value;
//                let count = 0;
//                for (let i = 0; i < addedItems.length; i++) {
//                    if (addedItems[i] === val) {
//                        count++;
//                    }
//                }
//                if (val !== """") {
//                    $(""#itemsContainer"").append('<div class=""items3""> <button class=""btn btn-success m-2 items2"" value=""' + val + '"">' + val.replace(',', '') + '<span class=""badge badge-dark m-1 p-2"">' + count + '</span></button></div>');
//                }
//            }
//        } else if (flag === ""add"") {
//            $(""#itemsContainer"").html("""");
//            $(""#itemsContainer"").append('<h2 class=""bg-info text-center text-light p-2"">Table - ' + tableNumber + '</h2>');
//            console.log(""item to be ");
                WriteLiteral(@"added = "" + item)
//            addedItems.push(item.trim()); // add item
//            let u = new Set(addedItems);
//            console.log(""u size = "" + u.size)
//            for (const value of u.values()) {
//                let val = value;
//                let count = 0;
//                for (let i = 0; i < addedItems.length; i++) {
//                    if (addedItems[i] === val) {
//                        count++;
//                    }
//                }
//                if (val !== """") {
//                    console.log(""val = "" + val)
//                    $(""#itemsContainer"").append('<div class=""items3""> <button class=""btn btn-success m-2 items2"" value=""' + val + '"">' + val.replace(',', '') + '<span class=""badge badge-dark m-1 p-2"">' + count + '</span></button></div>');
//                }
//            }
//        }
//    }

//    /* CALCULATING THE TOTAL */

//    /**
//     * Adding to total on adding item
//     *
//     * param {any} item
//     */
//    fu");
                WriteLiteral(@"nction addTotal(item) {
//        let total = 0;
//        let amount = """";

//        if (item.length !== 0) {
//            let i = 0;
//            while (i < item.length) {
//                if (item[i] === '$') {
//                    amount = """";
//                    i++;
//                    while (item[i] !== "" "" && item[i] !== '$' && i < item.length) {
//                        amount += item[i];
//                        i++;
//                    }
//                    total = parseFloat(amount);
//                } else {
//                    i++;
//                }
//            }

//            setTotal(1, total);    // updating the total
//        }

//    }

//    /**
//     * Updating the total amount on item removed.
//     *
//     * param {any} item
//     */
//    function subTotal(item) {
//        let total = 0;
//        let amount = """";

//        if (item.length !== 0) {
//            let i = 0;
//            while (i < item.length) {
//     ");
                WriteLiteral(@"           if (item[i] === '$') {
//                    amount = """";
//                    i++;
//                    while (item[i] !== "" "" && item[i] !== '$' && i < item.length) {
//                        amount += item[i];
//                        i++;
//                    }
//                    total = parseFloat(amount);
//                } else {
//                    i++;
//                }
//            }

//            setTotal(0, total);    // updating the total
//        }

//    }

//    /* calculating the total amount */
//    /**
//     * Set total will update the total amount.
//     *
//     * param {any} key 0 == - , 1 == + , 2 == set as new Value
//     * param {any} value amount
//     */
//    function setTotal(key, value) {
//        if (value != null && key != null) {
//            let amount = Number(value);
//            let currentTotal = $(""#totalSep"").text();
//            currentTotal = Number(currentTotal)

//            let total = 0;
//      ");
                WriteLiteral(@"      if (key === 0) {
//                if (currentTotal > 0) {
//                    total = (currentTotal - amount).toFixed(2);;
//                    if (total <= 0) {
//                        $(""#totalSep"").text(""0.00"");
//                        $(""#finalSepTotal"").val(Number($(""#totalSep"").text()));
//                        // separate pay contents
//                        $('#hst').text(""0.00"");
//                        $('#totalAmount').text(""0.00"");
//                    } else {
//                        $(""#totalSep"").text(total);
//                        $(""#finalSepTotal"").val(Number($(""#totalSep"").text()));
//                        // separate pay contents
//                        let hst = Number($(""#totalSep"").text()) * 0.13;
//                        $('#hst').text((hst.toFixed(2)));
//                        let t = (Number($(""#totalSep"").text()) + hst).toFixed(2);
//                        $('#totalAmount').text(t);
//                    }
//                }

//");
                WriteLiteral(@"            } else if (key === 1) {
//                total = (currentTotal + amount).toFixed(2);
//                $(""#totalSep"").text(total);
//                $(""#finalSepTotal"").val(Number($(""#totalSep"").text()));
//                // separate pay contents
//                let hst = Number($(""#totalSep"").text()) * 0.13;
//                $('#hst').text((hst.toFixed(2)));
//                let t = (Number($(""#totalSep"").text()) + hst).toFixed(2);
//                $('#totalAmount').text(t);
//            } else if (key === 2) {
//                amount = parseFloat(amount).toFixed(2);
//                $(""#totalSep"").text(amount)
//                $(""#finalSepTotal"").val(Number($(""#totalSep"").text()));
//                // separate pay contents
//                let hst = Number($(""#totalSep"").text()) * 0.13;
//                $('#hst').text((hst.toFixed(2)));
//                let t = (Number($(""#totalSep"").text()) + hst).toFixed(2);
//                $('#totalAmount').text(t);
//      ");
                WriteLiteral("      }\r\n\r\n//        }\r\n//    }\r\n\r\n//});\r\n</script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
