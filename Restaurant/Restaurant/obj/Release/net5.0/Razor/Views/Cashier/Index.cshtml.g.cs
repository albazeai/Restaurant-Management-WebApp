#pragma checksum "D:\myProjects\RestaurantCapstone\Restaurant\Restaurant\Views\Cashier\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "03bd3dcc274980a5c69c9b5a0ed83be57c62a102"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Cashier_Index), @"mvc.1.0.view", @"/Views/Cashier/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\myProjects\RestaurantCapstone\Restaurant\Restaurant\Views\_ViewImports.cshtml"
using Restaurant;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\myProjects\RestaurantCapstone\Restaurant\Restaurant\Views\_ViewImports.cshtml"
using Restaurant.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"03bd3dcc274980a5c69c9b5a0ed83be57c62a102", @"/Views/Cashier/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9a59b7783d8b0512a9ae3ec4003f04bd353cebbb", @"/Views/_ViewImports.cshtml")]
    public class Views_Cashier_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("action", new global::Microsoft.AspNetCore.Html.HtmlString("/Cashier/SeparatePays"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("sep_form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\myProjects\RestaurantCapstone\Restaurant\Restaurant\Views\Cashier\Index.cshtml"
  
    ViewData["Title"] = "Index";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n<h1>Cashier Home</h1>\r\n\r\n<div class=\"container\">\r\n    <h2 class=\"text-danger\">");
#nullable restore
#line 10 "D:\myProjects\RestaurantCapstone\Restaurant\Restaurant\Views\Cashier\Index.cshtml"
                       Write(ViewBag.ErrorMessage);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h2>\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-5 col-md-5\">\r\n            <div class=\"border border-success\">\r\n                <div");
            BeginWriteAttribute("class", " class=\"", 286, "\"", 294, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""table-info""></div>
                <div id=""table_action_container"" >
                    <div class=""alert alert-success"">
                        <hr />
                        <h2> SebTotal: $ <span id=""table_sebtotal""></span></h2>
                        <h2> HST(13%): $ <span id=""table_hst""></span></h2>
                        <hr />
                        <h2> Total: $ <span id=""table_total""></span></h2>
                        <hr />
                    </div>
                    <div");
            BeginWriteAttribute("class", " class=\"", 807, "\"", 815, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                        <button class= ""btn btn-primary m-2"" id=""sep_btn"">Pay Individually</button> <br /><hr />
                        <button class= ""btn btn-danger m-2"" id=""clear_btn"">Clear Table</button>
                    </div>
                </div>
                
            </div>
        </div>
        <div class=""col-sm-2 col-md-2"">
        </div>
        <div class=""col-sm-5 col-md-5"">
            <div class=""border border-success"" id=""sep_pay_container"">
                <input type=""hidden"" value=""0"" id=""flagBtn"" />
                <div");
            BeginWriteAttribute("class", " class=\"", 1390, "\"", 1398, 0);
            EndWriteAttribute();
            WriteLiteral(" id=\"sep_content\"></div>\r\n                <h2 class=\"bg-success text-center text-light p-2\">TOTAL</h2>\r\n                <div class=\"alert alert-success\">\r\n                    <h3");
            BeginWriteAttribute("class", " class=\"", 1577, "\"", 1585, 0);
            EndWriteAttribute();
            BeginWriteAttribute("id", " id=\"", 1586, "\"", 1591, 0);
            EndWriteAttribute();
            WriteLiteral(">Subtotal: $ <span id=\"sep_total_seb\">0.00</span></h3>\r\n                    <h3");
            BeginWriteAttribute("class", " class=\"", 1671, "\"", 1679, 0);
            EndWriteAttribute();
            BeginWriteAttribute("id", " id=\"", 1680, "\"", 1685, 0);
            EndWriteAttribute();
            WriteLiteral(">HST(13%): $ <span id=\"sep_hst\">0.00</span></h3>\r\n                    <hr />\r\n                    <h2");
            BeginWriteAttribute("class", " class=\"", 1787, "\"", 1795, 0);
            EndWriteAttribute();
            BeginWriteAttribute("id", " id=\"", 1796, "\"", 1801, 0);
            EndWriteAttribute();
            WriteLiteral(">Total: $ <span id=\"sep_total\">0.00</span></h2>\r\n                </div>\r\n                <div>\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "03bd3dcc274980a5c69c9b5a0ed83be57c62a1027748", async() => {
                WriteLiteral("\r\n                        <input type=\"hidden\" name=\"id\"");
                BeginWriteAttribute("value", " value=\"", 2039, "\"", 2047, 0);
                EndWriteAttribute();
                WriteLiteral(" id=\"tableId\" />\r\n                        <input type=\"hidden\" name=\"total\"");
                BeginWriteAttribute("value", " value=\"", 2123, "\"", 2131, 0);
                EndWriteAttribute();
                WriteLiteral(" id=\"finalSepTotal\" />\r\n                        <input type=\"hidden\" name=\"paidItems\"");
                BeginWriteAttribute("value", " value=\"", 2217, "\"", 2225, 0);
                EndWriteAttribute();
                WriteLiteral(" id=\"paidItemsInput\" />\r\n                        <hr />\r\n                        <input type=\"submit\" value=\"Process\" class=\"btn btn-success m-2\" />\r\n                    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    <hr />\r\n                    <a href=\"/Cashier\" class=\"btn btn-danger m-2\">Cancel</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n");
#nullable restore
#line 62 "D:\myProjects\RestaurantCapstone\Restaurant\Restaurant\Views\Cashier\Index.cshtml"
      await Html.RenderPartialAsync("_ValidationScriptsPartial");

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
    <script>
        $(document).ready(function () {
            $(""#table_action_container"").hide();
            $(""#sep_pay_container"").hide();

            let table_id = 0;
            let main_dict = {};

            $(""#tableSelecterIndex"").change(function () {
                $(""#table_action_container"").hide();
                $(""#sep_pay_container"").hide();
                //addedItems = []; // clear seprate pay items if there is any left.
                let tableId = isInteger($(""#tableSelecterIndex"").val());
                if (tableId) {
                    let id = $(""#tableSelecterIndex"").val();
                    $.ajax({
                        type: ""Post"",
                        url: ""/Cashier/TableDetails"",
                        data: { id: id },
                        success: function (data) {
                            table_id = data.tableId  // getting a copy of the table id
                            loadItems(data);
                        },
        ");
                WriteLiteral(@"                error: function (req, status, error) {
                        }
                    });
                } else {
                    $(""#sep_pay_container"").hide();
                    $(""#sep_content"").html("""");
                    $(""#table-info"").html("""");
                }

            });


            // load items on table selected
            function loadItems(data) {
                if (data !== null) {
                    // reset separate pay containers
                    sep_items = []
                    $(""#sep_pay_container"").hide();
                    $(""#sep_content"").html('');
                    $(""#sep_total_seb"").text(""0.00"")
                    $(""#sep_hst"").text(""0.00"")
                    $(""#sep_total"").text(""0.00"")

                    // display the current table data
                    let items = data.tableItems.split(',');
                    main_dict = dict_store(items);     // store items in dictionary 
                    display");
                WriteLiteral(@"TableItems(main_dict)     // disply items
                }
            }

            function dict_store(items) {
                let unique_items = new Set(items)
                let dict = {}
                // initalize quntity set to 0
                unique_items.forEach(function (value) {
                    if (value.trim() !== """") {
                        dict[value] = 0;
                    }
                })
                // set the actual quantity of each item
                unique_items.forEach(function (value) {
                    for (val of items) {
                        if (value.trim() !== """") {
                            if (val === value) {
                                dict[value] += 1;
                            }
                        }

                    }
                })

                return dict;
            }
            // display items on screen
            function displayTableItems(dict, flag = true) {
                // clear");
                WriteLiteral(@" pay container and hide it
           
                // display items 
                $(""#table-info"").html('');
                $(""#table-info"").append('<h2 class=""bg-info text-center text-light p-2"">Table - ' + table_id + '</h2>');
                let total = 0;
                for (let key in dict) {
                    if (dict[key] !== 0) {
                        let price = item_price(key);
                        total += price * dict[key];
                        $(""#table-info"").append('<button class=""btn btn-success m-2 table_items"" value = ""' + key + '"">' + key + '<span class= ""badge badge-dark m-1 p-2"" > ' + dict[key] + '</span ></button><br>');
                    }
                }
                // load the total amount
                let hst = (total * 0.13).toFixed(2)
                let table_total = (total + Number(hst)).toFixed(2)
                $(""#table_sebtotal"").text(total.toFixed(2))
                $(""#table_hst"").text(hst)
                $(""#table_total"").");
                WriteLiteral(@"text(table_total)
                // show action buttons (pay ind, clear table)
                $(""#table_action_container"").show();
                if (flag) {
                   $("".table_items"").prop('disabled', true);  // set the properies of the add buttons 
                }
            }

            // enable buttons when separat pay invoked
            $(""#sep_btn"").click(function () {
                $(""#sep_content"").html('');
                $(""#sep_pay_container"").show();
                // reset the buttons properties
                $("".table_items"").prop('disabled', false);
  
            });
                /* Adding items to separat pay container */
            $(""#table-info"").on(""click"", "".table_items"", function () {
                separate_pay_content($(this).val(), ""add"")
            });
            /* Removing items from separat pay container */
            $(""#sep_content"").on(""click"", "".sep_items"", function () {
                separate_pay_content($(this).val()");
                WriteLiteral(@", ""remove"")
            });

            // array will store and remove items from separate pay container
            let sep_items = []

            /**
             * the separate pay container changes (Add , Remove) items according to flag
             * param item  selected item
             * param flag  add or remove 
             */
            function separate_pay_content(item, flag) {

                // loop through the main data and remove item
                if (flag === ""remove"") {
                    for (let key in main_dict) {
                        if (key === item) {
                            main_dict[key] += 1;
                        }
                    }
                    // find matched item
                    const index = sep_items.indexOf(item)
                    if (index > -1) {
                        sep_items.splice(index, 1)  // remove item from separate pay content
                    }
                } else if (flag === ""add"") {
         ");
                WriteLiteral(@"           // loop through the main data and remove item
                    for (let key in main_dict) {
                        if (key === item) {
                            if (main_dict[key] > 0) {
                                main_dict[key] -= 1;
                            }

                        }
                    }
                    sep_items.push(item);  // add item to separate pay content
                }
                displayTableItems(main_dict, false) // update the main table data 
                let dict = dict_store(sep_items);
                $(""#sep_content"").html('');
                $(""#sep_content"").append('<h2 class=""bg-info text-center text-light p-2"">Table - ' + table_id + '</h2>');
                let total = 0;
                for (let key in dict) {
                    let price = item_price(key);
                    total += price * dict[key];
                    $(""#sep_content"").append('<button class=""btn btn-success m-2 sep_items"" value = ""' + ");
                WriteLiteral(@"key + '"">' + key + '<span class= ""badge badge-dark m-1 p-2"" > ' + dict[key] + '</span ></button><br>');
                }

                // load the total amount
                let hst = (total * 0.13).toFixed(2)
                let sep_total = (total + Number(hst)).toFixed(2)
                $(""#sep_total_seb"").text(total.toFixed(2))
                $(""#sep_hst"").text(hst)
                $(""#sep_total"").text(sep_total)

            }


            /**
             * calculating the item price and return the value
             *
             * param {any} item
             */
            function item_price(item) {
                let price = 0;
                let amount = """";

                if (item.length !== 0) {
                    let i = 0;
                    while (i < item.length) {
                        if (item[i] === '$') {
                            amount = """";
                            i++;
                            while (item[i] !== "" "" && item[i] !==");
                WriteLiteral(@" '$' && i < item.length) {
                                amount += item[i];
                                i++;
                            }
                            price = parseFloat(amount);
                        } else {
                            i++;
                        }
                    }

                    return price; // return total
                }
                return price;

            }
            //sep form submition
            $(""#sep_form"").submit(function () {
                if (confirm(""Are you sure you want to do this?"")) {
                    let items = sep_items.join(',');

                    /* sending request to proccess the separate pay and update the table items */
                    $.ajax({
                        type: ""Post"",
                        url: ""/Cashier/SeparatePays"",
                        data: { id: table_id, paidItems: items.toString(), total: $(""#sep_total"").text() },
                        success: functio");
                WriteLiteral(@"n (data) {

                            // reset separate pay containers
                            sep_items = []
                            $(""#sep_content"").html('');
                            $(""#sep_total_seb"").text(""0.00"")
                            $(""#sep_hst"").text(""0.00"")
                            $(""#sep_total"").text(""0.00"")

                            // check if anything left on the table 
                            let flag = false;
                            for (let key in main_dict) {
                                if (main_dict[key] > 0) {
                                    flag = true;
                                }
                            }
                            // if somthing left on the table then display it otherwise clear the table
                            if (flag) {
                                displayTableItems(main_dict, false)
                            } else {
                                window.location.href = ""/Cashier"";
");
                WriteLiteral(@"                            }

                        },
                        error: function (req, status, error) { }
                    });
                }

                return false;
            });

            // clear table button event
            $(""#clear_btn"").click(function () {
                if (confirm(""Are you sure you want to clear this Table?"")) {
                    let tableId = isInteger(table_id);
                    if (tableId) {
                        /* sending request to clear the table */
                        $.ajax({
                            type: ""Post"",
                            url: ""/Cashier/ClearTable"",
                            data: { id: table_id },
                            success: function (data) {
                                window.location.href = ""/Cashier"";
                            },
                            error: function (req, status, error) {
                                //console.log(msg);
           ");
                WriteLiteral(@"                 }
                        });
                    }
                } else {

                }
            });
            /**
             *
             *  validation method that validate the any integer value. (mostly used for table Id)
             */
            function isInteger(value) {
                return /^\d+$/.test(value);
            }
        });
    </script>

");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
